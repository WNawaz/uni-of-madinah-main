import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:shimmer/shimmer.dart';
import 'package:stacked/stacked.dart';
import 'package:uni_of_madinah/presentation/figma_design_Ui/detail_Screen/widget/custom_container_vm.dart';

// // ignore: must_be_immutable
class CustomContainerWidget extends StatelessWidget {
  final String content;
  final bool isEditing;

  CustomContainerWidget({
    required this.content,
    required this.isEditing,
  });

  @override
  Widget build(BuildContext context) {
    return ViewModelBuilder<CustomContainerVM>.reactive(
      viewModelBuilder: () => CustomContainerVM(),
      onViewModelReady: (model) {
        model.init();
      },
      builder: (context, model, child) => Container(
        padding: EdgeInsets.all(16.0),
        width: double.infinity,
        decoration: BoxDecoration(
          color: HexColor("#F5FAFD"),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (model.showSummary)
              Container(
                padding: EdgeInsets.all(16.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8.sp),
                  color: HexColor("#CFE6F0"),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            "Summary",
                            style: Theme.of(context)
                                .textTheme
                                .titleMedium!
                                .copyWith(color: HexColor("#05677E")),
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.info_outline,
                              color: HexColor("#05677E")),
                          tooltip:
                              "Disclaimer: This content is generated by AI and may contain errors or inaccuracies. Please be aware that the information provided may not be entirely correct. Use caution and verify any critical details independently.",
                          onPressed: () {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text(
                                  "Disclaimer: This content is generated by AI and may contain errors or inaccuracies. Please be aware that the information provided may not be entirely correct. Use caution and verify any critical details independently.",
                                ),
                                duration: Duration(seconds: 4),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                    SizedBox(height: 8.h),
                    model.loadingSummary
                        ? Shimmer.fromColors(
                            baseColor: Colors.grey[300]!,
                            highlightColor: Colors.grey[100]!,
                            child: Container(
                              height: 100,
                              width: double.infinity,
                              color: Colors.white,
                            ),
                          )
                        : Padding(
                            padding:
                                const EdgeInsets.symmetric(horizontal: 0.0),
                            child: Container(
                              width: 380.w,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(8.sp),
                                color: HexColor("#CFE6F0"),
                              ),
                              child: Padding(
                                padding: EdgeInsets.fromLTRB(
                                    10.sp, 10.sp, 10.sp, 10.sp),
                                child: Text(
                                  model.summary!,
                                  textAlign: TextAlign.justify,
                                ),
                              ),
                            ),
                          ),
                    SizedBox(height: 10.h),
                    Center(
                      child: SummaryWidget(
                        showingSummary: model.showSummary,
                        onPressed: () => model.hideSummary(),
                      ),
                    ),
                  ],
                ),
              ),
            SizedBox(height: 10.h),
            if (!model.showSummary)
              Center(
                child: SummaryWidget(
                  showingSummary: model.showSummary,
                  onPressed: () => model.handleSummaryTap(content),
                ),
              ),
            Padding(
              padding:
                  EdgeInsets.symmetric(horizontal: 2.0.sp, vertical: 12.sp),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Semantics(
                    excludeSemantics: true,
                    label: 'Description Section',
                    child: Text("Description",
                        style: Theme.of(context)
                            .textTheme
                            .titleMedium!
                            .copyWith(color: HexColor("#05677E"))),
                  )
                ],
              ),
            ),
            SingleChildScrollView(
              child: Padding(
                padding:
                    EdgeInsets.symmetric(horizontal: 2.0.sp, vertical: 12.sp),
                child: isEditing
                    ? TextFormField(
                        controller: model.descriptionController,
                        decoration: InputDecoration(
                          border: InputBorder.none,
                          contentPadding: EdgeInsets.fromLTRB(0, 0, 0, 4.sp),
                        ),
                        readOnly: !model.isDescriptionEditingEnabled,
                        maxLines: null,
                        onChanged: (value) =>
                            model.handleDescriptionChange(value),
                        style: Theme.of(context).textTheme.bodyMedium,
                      )
                    : SelectableText(
                        model.descriptionController.text,
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
              ),
            )
          ],
        ),
      ),
    );
  }
}

class SummaryWidget extends StatelessWidget {
  final bool showingSummary;
  final Function() onPressed;
  const SummaryWidget({
    super.key,
    required this.onPressed,
    required this.showingSummary,
  });

  @override
  Widget build(BuildContext context) {
    return ElevatedButton.icon(
      style: ElevatedButton.styleFrom(
        backgroundColor: const Color.fromRGBO(103, 80, 164, 0.08),
        shadowColor: Colors.transparent,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(32)),
        ),
      ),
      onPressed: onPressed,
      icon: showingSummary
          ? Icon(
              Icons.arrow_drop_up,
              color: HexColor("#05677E"),
            )
          : Icon(
              Icons.arrow_drop_down,
              color: HexColor("#05677E"),
            ),
      label: Text(
        showingSummary ? "Hide Summary" : "Show Summary",
        style: Theme.of(context).textTheme.labelLarge!.copyWith(
              color: HexColor("#05677E"),
            ),
      ),
    );
  }
}
